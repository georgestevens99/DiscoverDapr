// This code was generated by the Visual Studio 2019 gRPC Service template and slightly modified if noted below.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright © 2021 Solid Value Software, LLC

using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Server.Kestrel.Core;
using Microsoft.Extensions.Hosting;

namespace ServiceB
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        // Additional configuration is required to successfully run gRPC on macOS.
        // For instructions on how to configure Kestrel and gRPC clients on macOS, visit https://go.microsoft.com/fwlink/?linkid=2099682
        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                // Below is the default code, i.e. generated.
                //.ConfigureWebHostDefaults(webBuilder =>
                //{
                //    webBuilder.UseStartup<Startup>();
                //});

                // Below was added from examples in Microsoft documentation, used in ServiceC in  DiscoverDaprNETSdk7
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    // TODO Find out about below port 5050.  Note that ServiceB only listens to a queue,
                    // and not to any HTTP traffic other that to/from the sidecar.

                    // Below from GrpcServiceSample
                    webBuilder.ConfigureKestrel(options =>
                    {
                        // Setup a HTTP/2 endpoint without TLS.
                        options.ListenLocalhost(5050, o => o.Protocols = HttpProtocols.Http2);
                    });

                    // Below is generated code.
                    webBuilder.UseStartup<Startup>();
                });
    }
}
